

/*
EJERCICIO SOBRE POO EN JAVA - III

Se desea implementar una clase denominada Coche que codifique el funcionamiento básico de una vehículo. Para ello se definen los siguientes atributos y métodos

Atributos: Todos privados
     
Atributos de instancia:
•	Modelo:  Una cadena con el modelo de vehículo.
•	Distancia Total: Total de kilómetros recorridos
•	Distancia Parcial: Total de kilómetros desde que el coche se ha arrancado
•	Motor: Arrancado o parado ( true / false)
•	Velocidad: Un entero con la velocidad en km/h
•	VelocidadMax : Máxima velocidad con la que puede circular el vehiculo  
   
Métodos:
1)  Constructor: donde se indica el Modelo del coche y el máximo de velocidad, el resto de atributos se inicial izan  a cero con el motor apagado

2)  Arrancar: Activa el motor.

3) Parar: Para el motor y pone el contador parcial a 0 km y la velocidad a 0

4) Acelera: Incrementa la velocidad en un cantidad

5) Frena: Decrementa la velocidad en un cantidad

6) Recorre: Incrementa los kilómetros en la velocidad que lleve el coche

6) Info: Muestra el modelo, la velocidad actual, el estado, kilómetros parciales y totales

7) getKilometros : Me devuelve la distancia recorrida desde que se arranco.

8) infoError es un método privado que muestra por la salida estándar de errores que se ha intentado realizar una operación errónea sobre el coche.  System.err.println

Condiciones a cumplir:

1) No se puede arrancar el coche si  ya se ha arrancado.
2) No se puede superar la velocidad máxima
3) No se puede frenar si la velocidad es 0
4) No se puede parar si el coche ya está parado
5) Si el coche esta parado no se puede frenar, acelerar o recorrer

Si no se cumple la condiciones los método implicados devolverán false indicando que la operación no se ha podido realizar y  llamarán a infoError para que escriba un mensaje informativo.

*/
import java.util.Scanner;
public class Coche {
	

	static Scanner sc=new Scanner(System.in);
	private String modelo="";
	static  int distanciaTotal=0;
	private boolean motor=false;
	private int velocidad=0;
	private int VelocidadMax=0;
	static int contadorParcial=0;
	static boolean acelera;
	static boolean frena;
	static int km=0;
	static int kmsRecorridos=0;
	static int meta=800;
	
	
	//constructor que nos da los datos del modelo y velocidad máxima 
	public Coche(String modelo,int VelocidadMax) {
		this.modelo=modelo;
		this.distanciaTotal=distanciaTotal;
		this.motor=motor;
		this.velocidad=velocidad;
		this.VelocidadMax=VelocidadMax;
		
	}

	//Se arranca el motor del coche
	public void Arrancar() {
		if(motor==false) {
			
			this.motor=true;
			System.out.println("El vehículo está arrancado");
		}else {
			System.out.println("El motor ya está encendido");
		}
	}
	//Para el motor y pone a 0 el contador parcial y la velocidad
	public void Parar() {
		if(motor==true) {
			
			this.motor=false;
			System.out.println("El vehículo está apagado");
			this.velocidad=0;
			contadorParcial=0;
			System.out.println("Se apaga el motor ,se pone la velocidad a "+velocidad+" km y el contador parcial a "+contadorParcial+" km");
			
		}else {
			infoError("El motor ya está apagado");
		}
	}
	
	//Método que fija la velocidad por hora que establece el usuario cuando acelera
	
	public void Acelera(int aceleracion) {
		if(motor==true) {
			
			
			if(aceleracion>this.velocidad) {
				if(aceleracion<=VelocidadMax) {
					velocidad=aceleracion;
					distanciaTotal+=velocidad;
					contadorParcial+=velocidad;
				
				}else {
						infoError("Ha superado la velocidad máxima permitida por el vehículo,no se puede hacer la aceleración");
				}
				
			}else {
				infoError("Para poder acalerar la velocidad debe ser superior a la que está usando");
			}
		}else {
				infoError("Usted no puede acelerar porque el motor está apagado");
		}
	}
	
	//Método que fija la velocidad por h que establece el usuario cuando frena
	
	public void Frenar(int freno) {
		if(motor==true) {
			
			
			if(freno<this.velocidad) {
				velocidad=freno;
				distanciaTotal-=velocidad;
				contadorParcial-=velocidad;
				
			}else {
				infoError("Para poder frenar la velocidad debe ser inferior a la que está usando");
			}
		}else {
				infoError("Usted no puede frenar porque el motor está apagado");
		}
	}
	
	//km recorridos por h con la velocidad que lleva el usuario
	
	public void kmsRecorridos() {
		if(motor==true) {
		distanciaTotal+=this.velocidad;
		contadorParcial+=this.velocidad;
		}else {
			infoError(" Motor parado. No se puede avanzar ");
			
		}
	}
	
	//Mensajes de error
	
	  private void infoError( String mensaje){
		   System.err.println(mensaje);
	  }
	  public int getDistanciaTotal() {
		 return distanciaTotal;
	  }
	  public static boolean alcanzarMeta(Coche[] coches, int meta) {
			boolean fin = false;
			for (int t = 0; t < coches.length; t++) {
			     if ( coches[t].getDistanciaTotal() >= meta ){
			    	 fin = true; 
			    	 break;
			     }
			}
			return fin;
		}
		
	
	  //Ficha con toda la información del vehículo
	  
	public void info() {
		System.out.println("FICHA DE FORMULA 1");
		System.out.println("Modelo: "+this.modelo);
		System.out.println("La velocidad actual del vehículo es: "+this.velocidad);
		System.out.println("El estado actual del vehículo es [arrancado TRUE, apagado FALSE]: "+motor);
		System.out.println("Los kms totales recorridos por el vehículo son: "+distanciaTotal);
		System.out.println("Los km parciales del vehículo son: "+contadorParcial);
	}

	public static void main(String[] args) {
		
		System.out.println("BIENVENIDO A LA FORMULA1 ");
		
		System.out.println("Introduzca la velocidad por h que va a acelerar");
		int aceleracion=sc.nextInt();
		System.out.println("Introduzca la velocidad por h que va a frenar");
		int freno=sc.nextInt();
		
		//Parrilla de salida de 5 coches
		
		Coche[]coches=new Coche[5];
		
		//Creación de coches que van a correr
		
		int opcion=0;
		int contador=0;
		
		
		coches[0]=new Coche("Renault",370);
		coches[1]=new Coche("Ferrari",300);
		coches[2]=new Coche("Mercedes",250);
		coches[3]=new Coche("Toyota",250);
		coches[4]=new Coche("Ford",310);
		
		//Arrancan los coches
		System.out.println("¡Arrancan los motores!");
		for(int i=0;i<coches.length;i++) {
			coches[i].Arrancar();
		}
		
		//Comienza la carrera
		System.out.println("¡Comienza la carrera!");
		do {
			
			for(int i=0;i<coches.length;i++) {
				coches[i].Acelera(aceleracion);
				coches[i].kmsRecorridos();
				coches[i].Frenar(freno);
				coches[i].kmsRecorridos();
				coches[i].info();
			}
			System.out.println("------------------FINAL DE LA CARRERA----------------------");
		}while(!alcanzarMeta(coches,meta));
		
		for(int i=0; i< coches.length; i++){
			System.out.println((i+1)+"º Clasificado :");
			coches[i].info();
		}
	}

}

		
	
